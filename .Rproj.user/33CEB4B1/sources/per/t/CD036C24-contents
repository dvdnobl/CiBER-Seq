# Gene-level differential expression analysis using DESeq2

## SETUP ##

### Bioconductor and CRAN libraries used
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(apeglm)
library(tidyverse)

### Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)

### Check classes of the data we just brought in
class(meta)
class(data)

### View dataframes
View(meta)
View(data)

### Looking at distribution of expression counts
ggplot(data) +
  geom_histogram(aes(x=Mov10_oe_1), stat="bin", bins=200) +
  xlab("Raw expression counts") +
  ylab("Number of genes")

### Looking at variance vs. mean
### Poisson model for variance == mean, negative binomial for variance > mean
mean_counts <- apply(data[,3:5], 1, mean)
variance_counts <- apply(data[,3:5], 1, var)
df <- data.frame(mean_counts, variance_counts)

ggplot(df) +
  geom_point(aes(x=mean_counts, y=variance_counts)) +
  geom_line(aes(x=mean_counts, y=mean_counts), color="red") +
  scale_y_log10() +
  scale_x_log10()


## COUNT NORMALIZATION ##

### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))

### Creating the DESeq2DataSet object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, 
                              design = ~ sampletype)

View(counts(dds))

### Generate size factors
dds <- estimateSizeFactors(dds)
sizeFactors(dds)

### Creating and saving normalized count matrix
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t",
            quote=F, col.names=NA)


## QUALITY CONTROL ##

### Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)

### Plot PCA 
plotPCA(rld, intgroup="sampletype")

### Extract the rlog matrix from the object
rld_mat <- assay(rld)

### Compute pairwise correlation values
rld_cor <- cor(rld_mat) 
head(rld_cor)

### Plot heatmap
pheatmap(rld_cor)


## DE ANALYSIS ##

### Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta,
                              design = ~ sampletype)

### Run analysis
dds <- DESeq(dds)

### Check the size factors
sizeFactors(dds)

### Total number of raw counts per sample
colSums(counts(dds))

### Total number of normalized counts per sample
colSums(counts(dds, normalized=T))

### Plot dispersion estimates
plotDispEsts(dds)


### Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")

res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)

res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken, 
                         type='normal')

### Generate MA plots
plotMA(res_tableOE_unshrunken, ylim=c(-2,2))

plotMA(res_tableOE, ylim=c(-2,2))

### Exploring results
mcols(res_tableOE, use.names=T)

View(data.frame(res_tableOE))

## Define contrasts, extract results table and shrink log2 fold changes
contrast_kd <-  c("sampletype", "MOV10_knockdown", "control")

res_tableKD <- results(dds, contrast=contrast_kd, alpha = 0.05)

res_tableKD <- lfcShrink(dds, contrast=contrast_kd, res=res_tableKD,
                         type='normal')

## Summarize results
summary(res_tableOE)

### Add fold-change theshold to increase stringency
### Set thresholds
padj.cutoff <- 0.05
lfc.cutoff <- 0.58

### Converting results table to tibble
res_tableOE_tb <- res_tableOE %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()

res_tableKD_tb <- res_tableKD %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()

### Subsetting table to keep significant genes
sigOE <- res_tableOE_tb %>%
  filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)

sigKD <- res_tableKD_tb %>%
  filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)

### Show results
sigOE
sigKD  

### Conser5vative approach
summary(results(dds, contrast = contrast_oe, alpha = 0.05, lfcThreshold = 0.58))
